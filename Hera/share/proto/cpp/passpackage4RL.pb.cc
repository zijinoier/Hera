// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: passpackage4RL.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "passpackage4RL.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PassPackage4RL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassPackage4RL_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassPackages4RL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassPackages4RL_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_passpackage4RL_2eproto() {
  protobuf_AddDesc_passpackage4RL_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "passpackage4RL.proto");
  GOOGLE_CHECK(file != NULL);
  PassPackage4RL_descriptor_ = file->message_type(0);
  static const int PassPackage4RL_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackage4RL, beginframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackage4RL, endframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackage4RL, reward_),
  };
  PassPackage4RL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassPackage4RL_descriptor_,
      PassPackage4RL::default_instance_,
      PassPackage4RL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackage4RL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackage4RL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassPackage4RL));
  PassPackages4RL_descriptor_ = file->message_type(1);
  static const int PassPackages4RL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackages4RL, package_),
  };
  PassPackages4RL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassPackages4RL_descriptor_,
      PassPackages4RL::default_instance_,
      PassPackages4RL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackages4RL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPackages4RL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassPackages4RL));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_passpackage4RL_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassPackage4RL_descriptor_, &PassPackage4RL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassPackages4RL_descriptor_, &PassPackages4RL::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_passpackage4RL_2eproto() {
  delete PassPackage4RL::default_instance_;
  delete PassPackage4RL_reflection_;
  delete PassPackages4RL::default_instance_;
  delete PassPackages4RL_reflection_;
}

void protobuf_AddDesc_passpackage4RL_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_vision_5fdetection_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024passpackage4RL.proto\032\026vision_detection"
    ".proto\"v\n\016PassPackage4RL\022*\n\nbeginFrame\030\001"
    " \002(\0132\026.Vision_DetectionFrame\022(\n\010endFrame"
    "\030\002 \002(\0132\026.Vision_DetectionFrame\022\016\n\006reward"
    "\030\003 \002(\002\"3\n\017PassPackages4RL\022 \n\007package\030\001 \003"
    "(\0132\017.PassPackage4RL", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "passpackage4RL.proto", &protobuf_RegisterTypes);
  PassPackage4RL::default_instance_ = new PassPackage4RL();
  PassPackages4RL::default_instance_ = new PassPackages4RL();
  PassPackage4RL::default_instance_->InitAsDefaultInstance();
  PassPackages4RL::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_passpackage4RL_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_passpackage4RL_2eproto {
  StaticDescriptorInitializer_passpackage4RL_2eproto() {
    protobuf_AddDesc_passpackage4RL_2eproto();
  }
} static_descriptor_initializer_passpackage4RL_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PassPackage4RL::kBeginFrameFieldNumber;
const int PassPackage4RL::kEndFrameFieldNumber;
const int PassPackage4RL::kRewardFieldNumber;
#endif  // !_MSC_VER

PassPackage4RL::PassPackage4RL()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassPackage4RL)
}

void PassPackage4RL::InitAsDefaultInstance() {
  beginframe_ = const_cast< ::Vision_DetectionFrame*>(&::Vision_DetectionFrame::default_instance());
  endframe_ = const_cast< ::Vision_DetectionFrame*>(&::Vision_DetectionFrame::default_instance());
}

PassPackage4RL::PassPackage4RL(const PassPackage4RL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PassPackage4RL)
}

void PassPackage4RL::SharedCtor() {
  _cached_size_ = 0;
  beginframe_ = NULL;
  endframe_ = NULL;
  reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassPackage4RL::~PassPackage4RL() {
  // @@protoc_insertion_point(destructor:PassPackage4RL)
  SharedDtor();
}

void PassPackage4RL::SharedDtor() {
  if (this != default_instance_) {
    delete beginframe_;
    delete endframe_;
  }
}

void PassPackage4RL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassPackage4RL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassPackage4RL_descriptor_;
}

const PassPackage4RL& PassPackage4RL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_passpackage4RL_2eproto();
  return *default_instance_;
}

PassPackage4RL* PassPackage4RL::default_instance_ = NULL;

PassPackage4RL* PassPackage4RL::New() const {
  return new PassPackage4RL;
}

void PassPackage4RL::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_beginframe()) {
      if (beginframe_ != NULL) beginframe_->::Vision_DetectionFrame::Clear();
    }
    if (has_endframe()) {
      if (endframe_ != NULL) endframe_->::Vision_DetectionFrame::Clear();
    }
    reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassPackage4RL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassPackage4RL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Vision_DetectionFrame beginFrame = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beginframe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_endFrame;
        break;
      }

      // required .Vision_DetectionFrame endFrame = 2;
      case 2: {
        if (tag == 18) {
         parse_endFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endframe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_reward;
        break;
      }

      // required float reward = 3;
      case 3: {
        if (tag == 29) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PassPackage4RL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassPackage4RL)
  return false;
#undef DO_
}

void PassPackage4RL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassPackage4RL)
  // required .Vision_DetectionFrame beginFrame = 1;
  if (has_beginframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beginframe(), output);
  }

  // required .Vision_DetectionFrame endFrame = 2;
  if (has_endframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endframe(), output);
  }

  // required float reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PassPackage4RL)
}

::google::protobuf::uint8* PassPackage4RL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassPackage4RL)
  // required .Vision_DetectionFrame beginFrame = 1;
  if (has_beginframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beginframe(), target);
  }

  // required .Vision_DetectionFrame endFrame = 2;
  if (has_endframe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->endframe(), target);
  }

  // required float reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassPackage4RL)
  return target;
}

int PassPackage4RL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Vision_DetectionFrame beginFrame = 1;
    if (has_beginframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beginframe());
    }

    // required .Vision_DetectionFrame endFrame = 2;
    if (has_endframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endframe());
    }

    // required float reward = 3;
    if (has_reward()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassPackage4RL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassPackage4RL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassPackage4RL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassPackage4RL::MergeFrom(const PassPackage4RL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginframe()) {
      mutable_beginframe()->::Vision_DetectionFrame::MergeFrom(from.beginframe());
    }
    if (from.has_endframe()) {
      mutable_endframe()->::Vision_DetectionFrame::MergeFrom(from.endframe());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassPackage4RL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassPackage4RL::CopyFrom(const PassPackage4RL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassPackage4RL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_beginframe()) {
    if (!this->beginframe().IsInitialized()) return false;
  }
  if (has_endframe()) {
    if (!this->endframe().IsInitialized()) return false;
  }
  return true;
}

void PassPackage4RL::Swap(PassPackage4RL* other) {
  if (other != this) {
    std::swap(beginframe_, other->beginframe_);
    std::swap(endframe_, other->endframe_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassPackage4RL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassPackage4RL_descriptor_;
  metadata.reflection = PassPackage4RL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassPackages4RL::kPackageFieldNumber;
#endif  // !_MSC_VER

PassPackages4RL::PassPackages4RL()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PassPackages4RL)
}

void PassPackages4RL::InitAsDefaultInstance() {
}

PassPackages4RL::PassPackages4RL(const PassPackages4RL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PassPackages4RL)
}

void PassPackages4RL::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassPackages4RL::~PassPackages4RL() {
  // @@protoc_insertion_point(destructor:PassPackages4RL)
  SharedDtor();
}

void PassPackages4RL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassPackages4RL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassPackages4RL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassPackages4RL_descriptor_;
}

const PassPackages4RL& PassPackages4RL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_passpackage4RL_2eproto();
  return *default_instance_;
}

PassPackages4RL* PassPackages4RL::default_instance_ = NULL;

PassPackages4RL* PassPackages4RL::New() const {
  return new PassPackages4RL;
}

void PassPackages4RL::Clear() {
  package_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassPackages4RL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PassPackages4RL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PassPackage4RL package = 1;
      case 1: {
        if (tag == 10) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_package;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PassPackages4RL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PassPackages4RL)
  return false;
#undef DO_
}

void PassPackages4RL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PassPackages4RL)
  // repeated .PassPackage4RL package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->package(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PassPackages4RL)
}

::google::protobuf::uint8* PassPackages4RL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassPackages4RL)
  // repeated .PassPackage4RL package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->package(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassPackages4RL)
  return target;
}

int PassPackages4RL::ByteSize() const {
  int total_size = 0;

  // repeated .PassPackage4RL package = 1;
  total_size += 1 * this->package_size();
  for (int i = 0; i < this->package_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->package(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassPackages4RL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassPackages4RL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassPackages4RL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassPackages4RL::MergeFrom(const PassPackages4RL& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_.MergeFrom(from.package_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassPackages4RL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassPackages4RL::CopyFrom(const PassPackages4RL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassPackages4RL::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->package())) return false;
  return true;
}

void PassPackages4RL::Swap(PassPackages4RL* other) {
  if (other != this) {
    package_.Swap(&other->package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassPackages4RL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassPackages4RL_descriptor_;
  metadata.reflection = PassPackages4RL_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
