// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: passpackage4RL.proto

#ifndef PROTOBUF_passpackage4RL_2eproto__INCLUDED
#define PROTOBUF_passpackage4RL_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vision_detection.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_passpackage4RL_2eproto();
void protobuf_AssignDesc_passpackage4RL_2eproto();
void protobuf_ShutdownFile_passpackage4RL_2eproto();

class PassPackage4RL;

// ===================================================================

class PassPackage4RL : public ::google::protobuf::Message {
 public:
  PassPackage4RL();
  virtual ~PassPackage4RL();

  PassPackage4RL(const PassPackage4RL& from);

  inline PassPackage4RL& operator=(const PassPackage4RL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassPackage4RL& default_instance();

  void Swap(PassPackage4RL* other);

  // implements Message ----------------------------------------------

  PassPackage4RL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassPackage4RL& from);
  void MergeFrom(const PassPackage4RL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Vision_DetectionFrame beginFrame = 1;
  inline bool has_beginframe() const;
  inline void clear_beginframe();
  static const int kBeginFrameFieldNumber = 1;
  inline const ::Vision_DetectionFrame& beginframe() const;
  inline ::Vision_DetectionFrame* mutable_beginframe();
  inline ::Vision_DetectionFrame* release_beginframe();
  inline void set_allocated_beginframe(::Vision_DetectionFrame* beginframe);

  // required .Vision_DetectionFrame endFrame = 2;
  inline bool has_endframe() const;
  inline void clear_endframe();
  static const int kEndFrameFieldNumber = 2;
  inline const ::Vision_DetectionFrame& endframe() const;
  inline ::Vision_DetectionFrame* mutable_endframe();
  inline ::Vision_DetectionFrame* release_endframe();
  inline void set_allocated_endframe(::Vision_DetectionFrame* endframe);

  // required float reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline float reward() const;
  inline void set_reward(float value);

  // @@protoc_insertion_point(class_scope:PassPackage4RL)
 private:
  inline void set_has_beginframe();
  inline void clear_has_beginframe();
  inline void set_has_endframe();
  inline void clear_has_endframe();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Vision_DetectionFrame* beginframe_;
  ::Vision_DetectionFrame* endframe_;
  float reward_;
  friend void  protobuf_AddDesc_passpackage4RL_2eproto();
  friend void protobuf_AssignDesc_passpackage4RL_2eproto();
  friend void protobuf_ShutdownFile_passpackage4RL_2eproto();

  void InitAsDefaultInstance();
  static PassPackage4RL* default_instance_;
};
// ===================================================================


// ===================================================================

// PassPackage4RL

// required .Vision_DetectionFrame beginFrame = 1;
inline bool PassPackage4RL::has_beginframe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassPackage4RL::set_has_beginframe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassPackage4RL::clear_has_beginframe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassPackage4RL::clear_beginframe() {
  if (beginframe_ != NULL) beginframe_->::Vision_DetectionFrame::Clear();
  clear_has_beginframe();
}
inline const ::Vision_DetectionFrame& PassPackage4RL::beginframe() const {
  // @@protoc_insertion_point(field_get:PassPackage4RL.beginFrame)
  return beginframe_ != NULL ? *beginframe_ : *default_instance_->beginframe_;
}
inline ::Vision_DetectionFrame* PassPackage4RL::mutable_beginframe() {
  set_has_beginframe();
  if (beginframe_ == NULL) beginframe_ = new ::Vision_DetectionFrame;
  // @@protoc_insertion_point(field_mutable:PassPackage4RL.beginFrame)
  return beginframe_;
}
inline ::Vision_DetectionFrame* PassPackage4RL::release_beginframe() {
  clear_has_beginframe();
  ::Vision_DetectionFrame* temp = beginframe_;
  beginframe_ = NULL;
  return temp;
}
inline void PassPackage4RL::set_allocated_beginframe(::Vision_DetectionFrame* beginframe) {
  delete beginframe_;
  beginframe_ = beginframe;
  if (beginframe) {
    set_has_beginframe();
  } else {
    clear_has_beginframe();
  }
  // @@protoc_insertion_point(field_set_allocated:PassPackage4RL.beginFrame)
}

// required .Vision_DetectionFrame endFrame = 2;
inline bool PassPackage4RL::has_endframe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassPackage4RL::set_has_endframe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PassPackage4RL::clear_has_endframe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PassPackage4RL::clear_endframe() {
  if (endframe_ != NULL) endframe_->::Vision_DetectionFrame::Clear();
  clear_has_endframe();
}
inline const ::Vision_DetectionFrame& PassPackage4RL::endframe() const {
  // @@protoc_insertion_point(field_get:PassPackage4RL.endFrame)
  return endframe_ != NULL ? *endframe_ : *default_instance_->endframe_;
}
inline ::Vision_DetectionFrame* PassPackage4RL::mutable_endframe() {
  set_has_endframe();
  if (endframe_ == NULL) endframe_ = new ::Vision_DetectionFrame;
  // @@protoc_insertion_point(field_mutable:PassPackage4RL.endFrame)
  return endframe_;
}
inline ::Vision_DetectionFrame* PassPackage4RL::release_endframe() {
  clear_has_endframe();
  ::Vision_DetectionFrame* temp = endframe_;
  endframe_ = NULL;
  return temp;
}
inline void PassPackage4RL::set_allocated_endframe(::Vision_DetectionFrame* endframe) {
  delete endframe_;
  endframe_ = endframe;
  if (endframe) {
    set_has_endframe();
  } else {
    clear_has_endframe();
  }
  // @@protoc_insertion_point(field_set_allocated:PassPackage4RL.endFrame)
}

// required float reward = 3;
inline bool PassPackage4RL::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PassPackage4RL::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PassPackage4RL::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PassPackage4RL::clear_reward() {
  reward_ = 0;
  clear_has_reward();
}
inline float PassPackage4RL::reward() const {
  // @@protoc_insertion_point(field_get:PassPackage4RL.reward)
  return reward_;
}
inline void PassPackage4RL::set_reward(float value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:PassPackage4RL.reward)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_passpackage4RL_2eproto__INCLUDED
